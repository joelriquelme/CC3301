Sistema operativo utilizado
Linux debian11mate 5.10.0-18-amd64 #1 SMP Debian 5.10.140-1 (2022-09-02) x86_64 GNU/Linux
==== run-san ====
gcc -g -DSAN=1 -fsanitize=address -fsanitize=undefined -Wall -Werror -std=c18 -Wno-unused-function  test-integral.c integral.c -lm -lpthread -o integral.bin-san
./integral.bin-san
Calculando secuencialmente 2 veces
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 3827
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 3675
Calculando en paralelo hasta 1 veces
integral en [-0.050000,0.600000] con 5000 intervalos= 0.214813
Calculando secuencialmente 2 veces
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 3827
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 3675
Calculando en paralelo hasta 1 veces
integral en [-0.100000,-1.050000] con 5000 intervalos= 0.315277
Calculando secuencialmente 2 veces
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 3827
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 3675
Calculando en paralelo hasta 1 veces
integral en [-0.150000,-1.100000] con 5000 intervalos= 0.338679
Calculando secuencialmente 2 veces
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 3827
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 3675
Calculando en paralelo hasta 1 veces
integral en [-0.200000,-1.150000] con 5000 intervalos= 0.358697
Calculando secuencialmente 2 veces
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 3827
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 3675
Calculando en paralelo hasta 1 veces
integral par= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 2014, speedup= 1.824727
Felicitaciones: Su tarea funciona.
==== run-g ====
gcc -g -Wall -Werror -std=c18 -Wno-unused-function  test-integral.c integral.c -lm -lpthread -o integral.bin-g
./integral.bin-g
Calculando secuencialmente 2 veces
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 3553
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 3540
Calculando en paralelo hasta 1 veces
integral en [-0.050000,0.600000] con 5000 intervalos= 0.214813
Calculando secuencialmente 2 veces
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 3553
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 3540
Calculando en paralelo hasta 1 veces
integral en [-0.150000,-1.100000] con 5000 intervalos= 0.338679
Calculando secuencialmente 2 veces
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 3553
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 3540
Calculando en paralelo hasta 1 veces
integral en [-0.100000,-1.050000] con 5000 intervalos= 0.315277
Calculando secuencialmente 2 veces
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 3553
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 3540
Calculando en paralelo hasta 1 veces
integral en [-0.200000,-1.150000] con 5000 intervalos= 0.358697
Calculando secuencialmente 2 veces
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 3553
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 3540
Calculando en paralelo hasta 1 veces
integral par= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 1859, speedup= 1.904250
Felicitaciones: Su tarea funciona.
==== run ====
gcc -O -DOPT=1 -Wall -Werror -std=c18 -Wno-unused-function  test-integral.c integral.c -lm -lpthread -o integral.bin
Calculando secuencialmente 2 veces
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 2264
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 2359
Calculando en paralelo hasta 4 veces
integral en [-0.050000,0.600000] con 5000 intervalos= 0.214813
Calculando secuencialmente 2 veces
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 2264
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 2359
Calculando en paralelo hasta 4 veces
integral en [-0.100000,-1.050000] con 5000 intervalos= 0.315277
Calculando secuencialmente 2 veces
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 2264
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 2359
Calculando en paralelo hasta 4 veces
integral en [-0.200000,-1.150000] con 5000 intervalos= 0.358697
Calculando secuencialmente 2 veces
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 2264
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 2359
Calculando en paralelo hasta 4 veces
integral en [-0.150000,-1.100000] con 5000 intervalos= 0.338679
Calculando secuencialmente 2 veces
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 2264
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 2359
Calculando en paralelo hasta 4 veces
integral par= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 1210, speedup= 1.949587
Felicitaciones: el speedup es mejor que 1.7x.  Su tarea funciona.
